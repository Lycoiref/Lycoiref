1:HL["/_next/static/css/5f88011d96ca9c55.css","style",{"crossOrigin":""}]
2:HL["/_next/static/css/ccffada4a472fbc3.css","style",{"crossOrigin":""}]
0:["Vy5Gye9M-cZAkh--dUNP8",[[["",{"children":["pages",{"children":["article",{"children":[["slug","post2","d"],{"children":["__PAGE__?{\"slug\":\"post2\"}",{}]}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5f88011d96ca9c55.css","precedence":"next","crossOrigin":""}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/ccffada4a472fbc3.css","precedence":"next","crossOrigin":""}]],"$L4"]]]]
5:HL["/_next/static/css/57948b5676f14034.css","style",{"crossOrigin":""}]
6:I[7420,["185","static/chunks/app/layout-15577fefe046fd49.js"],""]
7:I[8011,["185","static/chunks/app/layout-15577fefe046fd49.js"],"Fireworks"]
8:I[6954,[],""]
9:I[7264,[],""]
3:[null,["$","html",null,{"lang":"zh","children":["$","body",null,{"children":[["$","$L6",null,{}],["$","$L7",null,{}],["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"initialChildNode":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","pages","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","initialChildNode":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","pages","children","article","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","initialChildNode":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","pages","children","article","children",["slug","post2","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","initialChildNode":["$La","$Lb",null],"childPropSegment":"__PAGE__?{\"slug\":\"post2\"}","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/57948b5676f14034.css","precedence":"next","crossOrigin":""}]]}],"childPropSegment":["slug","post2","d"],"styles":null}],"childPropSegment":"article","styles":null}],"childPropSegment":"pages","styles":null}]]}]}],null]
4:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Lycoiref's Blog"}],["$","meta","3",{"name":"description","content":"Generated by create next app"}]]
c:I[6930,["395","static/chunks/app/pages/article/%5Bslug%5D/page-35769c6b29255f45.js"],""]
d:T31ee,<nav class="toc"><ol><li><a href="#在-nextjs-中获取数据的正确姿势"> 在 Nextjs 中获取数据的正确姿势</a><ol><li><a href="#1.-server-side-rendering"> 1. Server Side Rendering</a></li><li><a href="#2.-使用routes-handler"> 2. 使用Routes Handler</a></li></ol></li></ol></nav><h1 id="%E5%9C%A8-nextjs-%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF" tabindex="-1"><a class="header-anchor" href="#%E5%9C%A8-nextjs-%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF">#</a> 在 Nextjs 中获取数据的正确姿势</h1>
<p>使用Next进行SSG时，Next允许我们使用一些服务端API，如fs，
这大大降低了我们获取数据的成本，但是在使用时，我们需要注意一些问题。</p>
<h2 id="1.-server-side-rendering" tabindex="-1"><a class="header-anchor" href="#1.-server-side-rendering">#</a> 1. Server Side Rendering</h2>
<p>因为我们SSG的最终目的是生成静态站点，因此我们的大部分组件都是需要使用
客户端API的，而这也是Next中很坑的一点：</p>
<p>虽然它向我们提供了服务端和客户端的API，但是这些API并不能在同一个文件中
混用，即如果你在一个页面中使用了<code>useEffect</code>，那么这个页面就不能使用
fs来读取文件，在以前的版本中一般使用<code>getStaticProps</code>来获取数据以及
调用服务端API，但是在<code>Next13</code>以及之后的版本中，这个API不允许在<code>pages</code>
路径下使用，取而代之的事<code>generateStaticParams</code>，且该API只允许返回
动态路由的slug，因此我们并不能像之前一样在此获取数据。</p>
<p>这时，最容易想到的解决方法就是封装一个子组件，并在子组件中使用<code>useEffect</code>
而父组件则作为SSR的入口：</p>
<pre><code class="language-jsx"><span class="hljs-comment">/* eslint-disable react-refresh/only-export-components */</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">ArticleCard</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Card&#x27;</span>
<span class="hljs-keyword">import</span> {
  getMarkdownFiles,
  getMarkdownFileBySlug,
} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../utils/markdownUtils&#x27;</span>

<span class="hljs-keyword">export</span> interface <span class="hljs-title class_">Article</span> {
  <span class="hljs-attr">title</span>: string
  <span class="hljs-attr">author</span>: string
  <span class="hljs-attr">description</span>: string
  <span class="hljs-attr">date</span>: <span class="hljs-title class_">Date</span>
  <span class="hljs-attr">tags</span>: string[]
  <span class="hljs-attr">slug</span>: string
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ArchivePage</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">let</span> files = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getMarkdownFiles</span>()
  files = files
    .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> file.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\.md$/</span>))
    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> file.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\.md$/</span>, <span class="hljs-string">&#x27;&#x27;</span>))
  <span class="hljs-keyword">const</span> <span class="hljs-attr">articles</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">Article</span>&gt; = []
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> file <span class="hljs-keyword">of</span> files) {
    <span class="hljs-keyword">const</span> { data } = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getMarkdownFileBySlug</span>(file)
    <span class="hljs-keyword">const</span> article = {
      <span class="hljs-attr">title</span>: data.<span class="hljs-property">title</span>,
      <span class="hljs-attr">author</span>: data.<span class="hljs-property">author</span>,
      <span class="hljs-attr">description</span>: data.<span class="hljs-property">description</span>,
      <span class="hljs-attr">date</span>: data.<span class="hljs-property">date</span>,
      <span class="hljs-attr">tags</span>: data.<span class="hljs-property">tags</span> || [],
      <span class="hljs-attr">slug</span>: file,
    }
    articles.<span class="hljs-title function_">push</span>(article)
  }

  <span class="hljs-keyword">return</span> (
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Archive<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
      {articles.map((article) =&gt; (
        <span class="hljs-tag">&lt;<span class="hljs-name">ArticleCard</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{article.slug}</span> <span class="hljs-attr">article</span>=<span class="hljs-string">{article}</span> /&gt;</span>
      ))}
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  )
}

</code></pre>
<p>像这样获取数据之后，我们就会愉快的发现，至少在<code>yarn dev</code>中，一切都是
正常的，但是当我们进行部署到生产环境时，问题出现了：</p>
<p><img src="e81f89d3f428ca443fb7d36c433da6e6.png" alt="Alt text" /></p>
<p>打开控制台，我们就能看到一片红色的报错，虽然目前笔者还不清楚是什么原因
（欢迎大神指点），而且该页面除了有报错外其他表现均正常，但是既然出现报错
那么就说明这种方法不是官方推荐的，因此我们需要寻找其他方法。</p>
<h2 id="2.-%E4%BD%BF%E7%94%A8routes-handler" tabindex="-1"><a class="header-anchor" href="#2.-%E4%BD%BF%E7%94%A8routes-handler">#</a> 2. 使用Routes Handler</h2>
<p>查阅Next文档Data Fetching部分，我们可以看到其提供了一个<code>Routes Handler</code>
的API，该API可以在<code>pages/api</code>路径下使用，因此我们可以在该路径下创建一个
<code>route.ts</code>文件，该文件的内容如下（只是把数据获取的逻辑移动到了该文件中）：</p>
<div class="tip"><p>注意，此处的返回值必须是<code>Response</code>，且内容为json格式，否则会报错。</p>
</div>
<pre><code class="language-ts"><span class="hljs-keyword">import</span> {
  getMarkdownFiles,
  getMarkdownFileBySlug,
} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../../utils/markdownUtils&#x27;</span>

<span class="hljs-comment">// export const dynamic = &#x27;force-dynamic&#x27; // defaults to force-static</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">GET</span>(<span class="hljs-params"></span>) {
  <span class="hljs-comment">// console.log(request);</span>
  <span class="hljs-keyword">let</span> files = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getMarkdownFiles</span>()
  files = files
    .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> file.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\.md$/</span>))
    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> file.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\.md$/</span>, <span class="hljs-string">&#x27;&#x27;</span>))
  <span class="hljs-keyword">const</span> articles = []
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> file <span class="hljs-keyword">of</span> files) {
    <span class="hljs-keyword">const</span> { data } = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getMarkdownFileBySlug</span>(file)
    <span class="hljs-keyword">const</span> article = {
      <span class="hljs-attr">title</span>: data.<span class="hljs-property">title</span>,
      <span class="hljs-attr">author</span>: data.<span class="hljs-property">author</span>,
      <span class="hljs-attr">description</span>: data.<span class="hljs-property">description</span>,
      <span class="hljs-attr">date</span>: data.<span class="hljs-property">date</span>,
      <span class="hljs-attr">tags</span>: data.<span class="hljs-property">tags</span> || [],
      <span class="hljs-attr">slug</span>: file,
    }
    articles.<span class="hljs-title function_">push</span>(article)
  }
  <span class="hljs-comment">// return {</span>
  <span class="hljs-comment">//   props: {</span>
  <span class="hljs-comment">//     articles,</span>
  <span class="hljs-comment">//   },</span>
  <span class="hljs-comment">// }</span>
  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title function_">json</span>({ articles })
}
</code></pre>
<p>而在原先的<code>page.tsx</code>中，我们则使用<code>useEffect</code>来获取数据：</p>
<pre><code class="language-jsx"><span class="hljs-comment">/* eslint-disable react-refresh/only-export-components */</span>
<span class="hljs-string">&#x27;use client&#x27;</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useEffect, useState } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>
<span class="hljs-keyword">import</span> <span class="hljs-title class_">ArticleCard</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Card&#x27;</span>

<span class="hljs-keyword">export</span> interface <span class="hljs-title class_">Article</span> {
  <span class="hljs-attr">title</span>: string
  <span class="hljs-attr">author</span>: string
  <span class="hljs-attr">description</span>: string
  <span class="hljs-attr">date</span>: <span class="hljs-title class_">Date</span>
  <span class="hljs-attr">tags</span>: string[]
  <span class="hljs-attr">slug</span>: string
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ArchivePage</span>(<span class="hljs-params"></span>) {
  <span class="hljs-keyword">const</span> [articles, setArticles] = useState&lt;<span class="hljs-title class_">Article</span>[]&gt;([])
  <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {
    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/pages/archive/api&#x27;</span>)
      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.<span class="hljs-title function_">json</span>())
      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> {
        <span class="hljs-title function_">setArticles</span>(res.<span class="hljs-property">articles</span>)
      })
  }, [])

  <span class="hljs-keyword">return</span> (
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Archive<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
      {articles.map((article) =&gt; (
        <span class="hljs-tag">&lt;<span class="hljs-name">ArticleCard</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{article.slug}</span> <span class="hljs-attr">article</span>=<span class="hljs-string">{article}</span> /&gt;</span>
      ))}
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
  )
}
</code></pre>
<p>分离出了数据获取的逻辑之后，我们就可以愉快的使用<code>useEffect</code>了，
build后再部署，可以看到控制台非常干净，而且页面也正常显示。我们
成功的解决了这个问题。</p>
b:["$","$Lc",null,{"data":{"title":"在Nextjs中获取数据的正确姿势","description":"记录了如何正确在Nextjs中Fetch Data","date":"$D2023-11-26T00:00:00.000Z","author":"Lycoiref"},"content":"$d"}]
a:null
